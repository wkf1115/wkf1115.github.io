<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wkf1115.github.io</id>
    <title>WKF1115</title>
    <updated>2020-08-11T04:13:10.637Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wkf1115.github.io"/>
    <link rel="self" href="https://wkf1115.github.io/atom.xml"/>
    <subtitle>平时多学习，编码少着急。</subtitle>
    <logo>https://wkf1115.github.io/images/avatar.png</logo>
    <icon>https://wkf1115.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WKF1115</rights>
    <entry>
        <title type="html"><![CDATA[计算机网络-数据链路层]]></title>
        <id>https://wkf1115.github.io/post/ji-suan-ji-wang-luo-shu-ju-lian-lu-ceng/</id>
        <link href="https://wkf1115.github.io/post/ji-suan-ji-wang-luo-shu-ju-lian-lu-ceng/">
        </link>
        <updated>2020-08-11T04:06:47.000Z</updated>
        <content type="html"><![CDATA[<p>1.封装成帧</p>
<ul>
<li>“帧”是数据链路层数据的基本单位，发送端在网络层的一段数据前后添加特定标记形成“帧”，接收段根据前后特定标记识别出“帧”（物理层没有帧的概念，只有比特流的0/1）。</li>
<li>“帧”的结构：帧首部+IP数据报+帧的数据+帧尾部。从帧首部到帧尾部是帧的长度。
<ul>
<li>（帧首部SOH）00000001，（帧尾部EOT）00000100。</li>
</ul>
</li>
</ul>
<p>2.透明传输</p>
<ul>
<li>“透明”在计算机领域是一个很重要的术语，代表一种实际存在的事物却看起来不存在一样。代表着虽然控制字符（帧首部和帧尾部）在帧数据中，但是要当作不存在的去处理。</li>
<li>那么如何实现透明呢？在刚刚第一条的帧中，如果数据本身就含有帧首部和帧尾部，那么就会导致数据读取出现错误，帧首部和帧尾部不匹配。解决这种情况做法就是在插入帧尾部前加入一个转义字符ESC，在读取的时候如果遇到帧尾部，会判断它前面有没有ESC字符，如果有则代表它是一个帧尾部。</li>
</ul>
<p>3.差错检测</p>
<ul>
<li>物理层只管传输比特流，无法控制是否出错。所以数据链路层负责“差错检测”的工作。</li>
<li>差错检测方式：</li>
<li>1.奇偶校验码：
<ul>
<li>通过查数据中1的个数，如果为奇数，后面校验位为1，如果为偶数，校验位为0。在数据传输完成后对奇偶校验位和数据进行比对来验证是否发生数据丢失。</li>
</ul>
</li>
<li>2.循环冗余校验码CRC：
<ul>
<li>
<p>是一种根据传输或保存的数据而产生固定位数校验码的方法，检测数据传输或者保存后可能出现的错误。</p>
</li>
<li>
<p>具体操作：选定一个用于校验的多项式G(X),并在数据尾部添加r个0，将添加r个0后的数据使用模“2”除法（和一般的除法相比就是使用XOR异或来代替中间的相减过程）除以多项式的位串，把得到的余数填充在原数据r个0的位置得到可校验的位串。</p>
</li>
<li>
<p>例子：使用CRC计算101001的可校验位串。</p>
</li>
<li>
<p>答：G(X) = x三次方 + x二次方 + 1，然后101001变成101001000。添加3个0。<br>
<img src="https://wkf1115.github.io/post-images/1597118969026.png" alt="" loading="lazy"><br>
￼       下一步就是进行填充，所以101001000变为101001001。组装好数据之后，接收段收到消息会将这个数据除以G(x)，根据余数判断是否出错。如果余数不是0，那么数据不正确。</p>
</li>
<li>
<p>常用的CRC的G(x)多项式：<br>
￼<img src="https://wkf1115.github.io/post-images/1597119021731.png" alt="" loading="lazy"></p>
</li>
</ul>
</li>
</ul>
<p>4.MTU</p>
<ul>
<li>MTU是最大传输单元，代表了数据链路层中数据帧最大的大小。路径MTU由链路中的最小MTU决定（木桶效应）。</li>
</ul>
<p>5.以太网协议</p>
<ul>
<li>
<p>以太网是一种使用广泛的局域网技术，以太网是一种应用于数据链路层的协议，使用以太网可以完成相邻设备的数据帧传输。</p>
</li>
<li>
<p>内容：</p>
<ul>
<li>目的地址（MAC地址6个字节）+源地址（6个字节）+类型（2个字节）+帧数据（46-1500字节）+CRC（校验码4个字节）。</li>
</ul>
</li>
<li>
<p>例子：</p>
<ul>
<li>在路由器中，路由器使用以太网协议来进行数据的转发。匹配MAC地址表，找到对应的硬件接口，对不同的接口发送数据帧。（如果地址表中没有找到目标地址，首先会进行广播来确定所有连接的硬件地址，之后将地址表进行更新）。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机网络-物理层]]></title>
        <id>https://wkf1115.github.io/post/ji-suan-ji-wang-luo-wu-li-ceng/</id>
        <link href="https://wkf1115.github.io/post/ji-suan-ji-wang-luo-wu-li-ceng/">
        </link>
        <updated>2020-08-11T04:04:09.000Z</updated>
        <content type="html"><![CDATA[<p>作用：连接不同的物理设备。传输比特流<br>
分类：双绞线，同轴电缆，光纤。</p>
<p>主要传输比特流：也就是高低电信号交替输出，高低电信号代表了0/1</p>
<ul>
<li>
<p>信道的基本概念：</p>
<ul>
<li>信道是往一个方向传送信息的媒体。一条通信电路往往包含一个接收信道和一个发送信道。</li>
</ul>
</li>
<li>
<p>信道的分类：</p>
<ul>
<li>
<p>1.单工通信信道：只能一个方向通信，没有反方向反馈的信道，多用于有线电视，收音机等。</p>
</li>
<li>
<p>2.半双工通信信道：双方都可以发送和接收信息，但是不能双方同时发送，也不能双方同时接收。</p>
</li>
<li>
<p>3.全双工通信信道：双方都可以同时发送和接收信息。目前的网线都用的是这种信道。</p>
</li>
<li>
<p>分用-复用技术：<br>
为了避免信道p2p导致的资源浪费问题，使用一个复用器和一个分用器来连接双方的机器，分用器和复用器中间是一个信道。两边的机器通过这一个信道有序的进行数据传输。</p>
<ul>
<li>分用-复用技术分类：
<ul>
<li>1.频分复用</li>
<li>2.时分复用</li>
<li>3.波分复用</li>
<li>4.码分复用</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机网络层次]]></title>
        <id>https://wkf1115.github.io/post/ji-suan-ji-wang-luo-ceng-ci/</id>
        <link href="https://wkf1115.github.io/post/ji-suan-ji-wang-luo-ceng-ci/">
        </link>
        <updated>2020-08-11T03:59:51.000Z</updated>
        <content type="html"><![CDATA[<p>OSI的七层模型：<img src="https://wkf1115.github.io/post-images/1597118494553.png" alt="" loading="lazy"><br>
市场化方面，OSI并不是实际现在使用的模型。</p>
<p>TCP/IP四层模型：<br>
<img src="https://wkf1115.github.io/post-images/1597118575621.png" alt="" loading="lazy"><br>
通过网络接口层来进行交互。<br>
<img src="https://wkf1115.github.io/post-images/1597118607105.png" alt="" loading="lazy"><br>
<img src="https://wkf1115.github.io/post-images/1597118618364.png" alt="" loading="lazy"><br>
<img src="https://wkf1115.github.io/post-images/1597118625350.png" alt="" loading="lazy"><br>
<img src="https://wkf1115.github.io/post-images/1597118630064.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis数据类型]]></title>
        <id>https://wkf1115.github.io/post/redis-shu-ju-lei-xing/</id>
        <link href="https://wkf1115.github.io/post/redis-shu-ju-lei-xing/">
        </link>
        <updated>2020-07-10T14:14:11.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://wkf1115.github.io/post-images/1594390497388.png" alt="" loading="lazy"><br>
总：5种常用数据类型：</p>
<pre><code>1.string
2.hash
3.list
4.set
5.sorted_set
</code></pre>
<ul>
<li>首先，redis自身是一个map，其中所有的数据都采用key：value的形式存储。key的数据类型永远是字符 串，这里讨论的数据类型都是value的。</li>
</ul>
<p>string：</p>
<pre><code>1.存储的数据：单个数据，是最简单的数据存储类型，也是最常用的。
2.存储数据的格式：一个空间保存一个数据
3.存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作。

4.基本操作：set，get，del，mset，mget，strlen，append
</code></pre>
<ul>
<li>
<p>🍎单数据操作和多数据操作的比较（set和mset）：<br>
<img src="https://wkf1115.github.io/post-images/1594390545959.png" alt="" loading="lazy"></p>
</li>
<li>
<p>可以看到，单指令插入三条指令要来回3次，也就是6次时间，而多指令只需要两次时间。</p>
</li>
<li>
<p>解决主键问题：<br>
<img src="https://wkf1115.github.io/post-images/1594390689961.png" alt="" loading="lazy"></p>
<ul>
<li>incr和decr为了解决数据库表主键自增问题，如果key为string里面都是数字，就可以使用incr和decr进行自增和自减。incrby和decrby可以指定增加值或者减少值。</li>
</ul>
</li>
<li>
<p>🍎string作为数值操作：<br>
1.string在redis内部存储默认是一个字符串，当遇到incr或者decr这种增减操作的时候会转成数值进行操作。<br>
2.redis是原子性单线程的，不会出现并发问题。<br>
3.超过java long型数据最大值或者string不是纯数字，就会报错。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis的安装]]></title>
        <id>https://wkf1115.github.io/post/redis-de-an-zhuang/</id>
        <link href="https://wkf1115.github.io/post/redis-de-an-zhuang/">
        </link>
        <updated>2020-07-10T14:12:21.000Z</updated>
        <content type="html"><![CDATA[<p>docker下的安装：</p>
<ul>
<li>1.docker search redis</li>
<li>2.docker pull redis:latest</li>
<li>3.docker run -itd --name redis-test -p 6379:6379 redis</li>
<li>4.docker exec -it redis-test /bin/bash</li>
<li>5.接下来运行redis-cli可以进入redis的客户端。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java并发编程艺术第五章学习笔记📒]]></title>
        <id>https://wkf1115.github.io/post/java-bing-fa-bian-cheng-yi-zhu-di-wu-zhang-xue-xi-bi-ji/</id>
        <link href="https://wkf1115.github.io/post/java-bing-fa-bian-cheng-yi-zhu-di-wu-zhang-xue-xi-bi-ji/">
        </link>
        <updated>2020-05-08T11:35:54.000Z</updated>
        <content type="html"><![CDATA[<p>第五章：Java中的锁：</p>
<p>1.Lock接口：</p>
<ul>
<li>
<p>它提供的功能与sunchronized关键字类似，只不过它可以在使用时显示地获取和释放锁。<br>
Lock lock = new ReentrantLock();<br>
lock.lock();<br>
try {<br>
} finally {<br>
lock.unlock();<br>
}</p>
</li>
<li>
<p>🍉它具有synchronized关键字不具备的特性：</p>
</li>
<li>
<p>1.可以非阻塞的获取锁（boolean tryLock），被synchronize修饰的方法在一个线程执行的时候其他线程都会等待锁的释放（阻塞的获取锁），这样会导致开销很大。tryLock可以立刻判断能否获得锁。</p>
</li>
<li>
<p>2.能被中断的获取锁（void lockInterruptibly（）），正在获取锁的线程被中断的时候可以立刻抛出异常并且释放锁。</p>
</li>
<li>
<p>3.可以指定花费多少时间来获取锁（boolean tryLock（long time,TimeUnit unit）），如果超时就不获取了。</p>
</li>
</ul>
<p>2.队列同步器AQS：</p>
<ul>
<li>
<p>AQS是用来构建锁或者其他同步组件的基础框架，使用一个int成员变量来表示同步状态。通过内置的FIFO队列完成线程获取排队。</p>
</li>
<li>
<p>🍉使用方式：主要是继承，子类通过继承AQS来实现它的抽象方法。在实现过程中如果要对同步状态进行查询或者修改，就要使用ASQ的三个基础方法（getState()、setState(int newState)和compareAndSetState(int expect,int update)<br>
）这三个方法可以保证线程安全。</p>
</li>
<li>
<p>🍉同步器是实现锁的关键：</p>
</li>
<li>
<p>1.锁是面向使用者的，锁定义了使用者与锁交互的接口，隐藏了实现细节。</p>
</li>
<li>
<p>2.同步器面向锁的实现者，简化了锁的实现方式，它掌控了同步状态管理，线程排队，等待与唤醒的底层操作。屏蔽了底层的复杂操作。</p>
</li>
<li>
<ol>
<li>AQS的接口与示例：</li>
</ol>
<ul>
<li>上面讲过，AQS本身是个模版，提供一些抽象方法。具体实现类继承AQS之后需要使用三个方法来设定同步的状态（这三个方法是设定好的，不需要重写）：
<ul>
<li>
<p>1.getState():获取当前同步状态。</p>
</li>
<li>
<p>2.setState(int newState):设置当前同步状态。</p>
</li>
<li>
<p>3.compareAndSetState(int expect,int update):使用CAS设置当前状态，该方法能够保证状态设置的原子性。</p>
</li>
<li>
<p>🍉而同步器可以被重写的方法分为独占式和共享式：</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://wkf1115.github.io/post-images/1588938048081.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>🍉同步器也提供了一些模版方法：<br>
<img src="https://wkf1115.github.io/post-images/1588938059427.png" alt="" loading="lazy"></p>
</li>
<li>
<p>基本分为三类：1.独占式获取与释放同步状态，2.共享式获取与释放同步状态和3.查询同步队列中的等待线程情况。</p>
<ul>
<li>独占锁就是在同一时刻只能有一个线程获取到锁，而其他获取锁的线程只能处于同步队列中等待。</li>
<li>🍉例子：AQS里面有一个独占锁实现类，它通过state表示线程占用状态，通过CAS设置同步状态。可以看出 用户使用显式锁的时候不需要直接操作AQS，操作实现类即可。</li>
</ul>
</li>
<li>
<p>2.AQS的实现分析：</p>
<ul>
<li>
<p>1.同步队列：</p>
<ul>
<li>AQS依赖同步队列（FIFO双向队列）来完成同步状态的管理。</li>
<li>🍉当前线程获取同步状态失败的时候，同步器会将当前线程以及等待状态信息构造为一个节点加入同步队列中，同时线程会被阻塞。同步状态释放时，会把首节点线程唤醒，尝试再次获取同步状态。<br>
<img src="https://wkf1115.github.io/post-images/1588938202596.png" alt="" loading="lazy"></li>
<li>同步器拥有首节点和尾节点。<br>
<img src="https://wkf1115.github.io/post-images/1588938217248.png" alt="" loading="lazy"><br>
<img src="https://wkf1115.github.io/post-images/1588938226368.png" alt="" loading="lazy"></li>
<li>🍉尾节点的插入需要使用CAS，头节点出队则不需要，因为同时只会有一个线程获取到同步状态。</li>
</ul>
</li>
<li>
<p>2.独占式同步状态获取与释放：</p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM学习小随笔📓]]></title>
        <id>https://wkf1115.github.io/post/jvm-xue-xi-xiao-sui-bi/</id>
        <link href="https://wkf1115.github.io/post/jvm-xue-xi-xiao-sui-bi/">
        </link>
        <updated>2020-04-29T04:06:20.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://wkf1115.github.io/post-images/1588133206825.png" alt="" loading="lazy"><br>
一图流解释JVM结构：类加载，运行时数据区（堆（常量池 静态变量）线程（本地方法栈 JavaVM栈 程序计数器）方法区（类信息 code编译代码）），JMM，直接内存。</p>
<p>1.class文件的结构：</p>
<ul>
<li>
<p>魔数和class版本号</p>
</li>
<li>
<p>常量池（最大的区域，变量属性类型名称，方法的属性类型名称）</p>
</li>
<li>
<p>访问标志（表示这个类是class还是接口，public还是private，是否是final）</p>
</li>
<li>
<p>类索引，父类索引，接口索引（表示这个类的继承关系）</p>
</li>
<li>
<p>字段表属性（表示字段（属性）是public还是啥，是static还是啥，是final还是啥，是什么数据类型）</p>
</li>
<li>
<p>方法表属性（和字段表类似，只不过是形容方法的）</p>
</li>
<li>
<p>属性表属性（描述上两个表中特殊属性，比如code）</p>
</li>
<li>
<p>🍉结构结论：开始先来个class文件的描述，接下来是最大的储存仓库，基本上所有实体名称属性都在里面，之后是描述类的属性，描述字段的属性，描述方法的属性。</p>
</li>
<li>
<p>🍉究极简化：描述——&gt;仓库——&gt;类字段方法属性<br>
（读取后面类字段方法的时候在最后只能读取一个属性，作用域啥的，要想读到实体的东西都要去仓库（常量池）中找）</p>
</li>
</ul>
<p>2.类生命周期中的加载过程：</p>
<ul>
<li>在加载过程中，class文件会被jvm识别，将读取到的class加载到堆中并创建一个对象。作为方法区中的使用入口。<br>
（类加载不是一下就将所有类都装载的，如果这个类没有被使用，JVM就不会加载它，如果JVM发现类中间存在错误，就会报错）</li>
</ul>
<p>3.类生命周期中的连接过程：</p>
<ul>
<li>
<p>验证过程：连接阶段第一步，验证class文件的格式是否正确，语义是否完整，会不会危害JVM安全之类的</p>
</li>
<li>
<p>准备过程：为类变量分配内存并初始化（给默认值）</p>
</li>
<li>
<p>解析过程：在Java文件编译为class文件的时候，引用会被替换为符号引用，代指真正的地址。解析过程就是将符号引用转为直接引用的过程。</p>
</li>
</ul>
<p>4.类生命周期的初始化过程：</p>
<ul>
<li>为刚刚准备过程中的静态变量赋于正确的初始值。</li>
</ul>
<p>5.使用过程：</p>
<ul>
<li>方法区中保存着类信息，堆中保存类实例</li>
</ul>
<p>6.之后就是卸载了，JVM停止之后类的信息会被卸载掉</p>
<p>🍉类生命周期总结：类加载（将十六进制class文件载入方法区和堆，堆中保存一个实例）—&gt;验证（检查是否正确）—&gt;准备(分配内存初始化)——&gt;解析(把符号引用解析为直接引用)—&gt;初始化(赋正确的初值)—&gt;使用—&gt;卸载</p>
<p>🍉小结：载入方法区和堆（类加载），检查初始化不能少（验证，准备），再把引用替换好（解析），正确初始完成好，使用灭亡结束早，一个类就over了。</p>
<p>7.类加载器有三种：</p>
<ul>
<li>
<p>启动类加载器（Bootstrap ClassLoader）：加载jre/lib目录下的类库，不能被java程序引用，是使用C++实现的，是JVM的一部分。</p>
</li>
<li>
<p>扩展类加载器（Extension ClassLoader）：加载jre/lib/ext目录中的类库，比如javax.*，java程序可以调用扩展类加载器</p>
</li>
<li>
<p>应用程序类加载器（Application ClassLoader）：加载用户类路径的类，一般情况下它是默认的类加载器。</p>
</li>
</ul>
<p>🍉扩展和应用程序加载器都继承于java.lang.ClassLoader。所以更像一个类加载器。启动类加载器将下面两个类加载器加载后，它们才能加载别的类。</p>
<p>8.类加载可以三种方式：</p>
<ul>
<li>
<p>命令行启动时由JVM初始化</p>
</li>
<li>
<p>Class.forName():不止将.class文件加载到jvm中，还会进行解释，效果就是会执行类中static块</p>
</li>
<li>
<p>ClassLoader.loadClass():只会加载.class文件至jvm中，不会执行static中的内容，只用在newInstance才会执行。</p>
</li>
</ul>
<p>9.JVM类加载机制：</p>
<p>全盘负责，父类委托，缓存机制，双亲委派机制。</p>
<ul>
<li>
<p>全盘负责就是自己的类自己的类加载器加载，不让其他的类加载器去管。</p>
</li>
<li>
<p>父类委托就是让父类加载器先加载，加载不了自己再加载。</p>
</li>
<li>
<p>缓存机制就是加载过后的class文件都会被缓存，以后优先去缓存区中寻找Class。</p>
</li>
<li>
<p>双亲委派就是强化版的父类委托，一层一层的向上提交任务。优势就是防止内存中出现多份同样的字节码。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深入了解Java虚拟机第二章笔记📒]]></title>
        <id>https://wkf1115.github.io/post/shen-ru-liao-jie-java-xu-ni-ji-di-er-zhang-bi-ji/</id>
        <link href="https://wkf1115.github.io/post/shen-ru-liao-jie-java-xu-ni-ji-di-er-zhang-bi-ji/">
        </link>
        <updated>2020-04-24T09:15:14.000Z</updated>
        <content type="html"><![CDATA[<p>第二章：垃圾收集器与内存分配策略</p>
<p>   首先，程序计数器，虚拟机栈和本地方法栈由于是编译时就可以确定内存大小的，所以不需要GC进行处理。 相反，Java堆和方法区不一样，只有在运行期才可以看出来需要创建多少对象，哪些对象不同的程序分支会分配不同数量的内存。<br>
   所以，需要GC进行处理，不然内存会有溢出或者泄漏的风险</p>
<ul>
<li>
<p>1.判断对象是否死去：</p>
<ul>
<li>
<p>1.引用计数算法：</p>
<p>给对象添加一个引用计数器，每当有地方引用它时，计数器+1，失去引用时，计数器-1，计数器为0的对象会被判断为失效。<br>
（主流的JVM没有使用此方法，因为它无法解决对象之间的循环引用。如果A对象的字段引用B对象，B对象的字段引用A对象，这两个对象已经失效，因为除了他们自己，外界已经无法访问。但如果使用引用计数算法，这两个对象不能被回收。）</p>
</li>
<li>
<p>2.可达性分析算法：</p>
<p>🍉主流的商用语言的主流实现都是这么判断的，通过一个GC Roots对象根节点向下搜索，当一个对象无法从GC Root向下搜索查到，证明这个对象不可用。如图中的5，6，7虽然相互引用，但是无法与根节点产生联系。<br>
<img src="https://wkf1115.github.io/post-images/1587720275460.png" alt="" loading="lazy"></p>
<ul>
<li>java中可作为GC Roots的对象包括：
<ul>
<li>1.虚拟机栈中引用的对象</li>
<li>2.方法区中类静态属性引用的对象</li>
<li>3.方法区中常量引用的对象</li>
<li>4.本地方法栈中Native方法引用的对象</li>
</ul>
</li>
</ul>
</li>
<li>
<p>3.引用的分类：</p>
<ul>
<li>
<p>谈到对象是否应该被销毁，就要谈到对象的引用。<br>
JDK1.2以前，如果引用类型保存着一个对象的内存地址就称为代表一个引用。<br>
🍉（这种分类方式不够好，因为这时一个对象只有存在引用和不存在引用两种情况）<br>
🍉因为很多时候，对象在内存空间足够的时候最好保留，内存没地方再按照对象优先级进行销毁。</p>
</li>
<li>
<p>1.强引用：就是一般的将对象指向一个引用Object obj = new Object();<br>
只要obj这个引用存在，GC就不会回收那个对象。</p>
</li>
<li>
<p>2.软引用：有用但非必须，内存即将溢出的时候GC会对它们进行回收</p>
</li>
<li>
<p>3.弱引用：比软引用更没用的对象，它们只能存活到下次GC发生之前。</p>
</li>
<li>
<p>4虚引用（幽灵引用，幻影引用）：最弱的引用关系，这个“虚”字并不会影响他的生存时间，仅仅是它被回收的时候可以收到一个系统通知。</p>
</li>
</ul>
</li>
<li>
<p>4.对象什么时候才叫真的死了？</p>
<ul>
<li>
<p>一个对象真的死亡，要经历两次标记过程。</p>
<ul>
<li>第一次：可达性分析发现一个对象没有和GC Roots相连接，会被第一次标记，并判断是否应该执行finalize()方法，如果没有必要执行，对象会被回收，如果有必要执行，进入下一步。</li>
<li>第二次：对象进入F-queue，该队列由Finalizer线程执行，JVM会触发对象的finalize()方法，并在触发一段时间后，不管有没有执行完成，都停止它。<br>
GC会在对象执行完finalize()方法后查看有没有和其他引用相连接，如果建立连接，那么GC会停止回收它。这就是第二次标记。如果没有建立连接，那么难逃回收的命运了。</li>
</ul>
<p>🍉值得注意的是，一个对象系统只会自动调用一次finalize()，如果执行过一次，第二次就不会自动执行了。</p>
<p>🍎这个方法毕竟不是C/C++的析构函数，它被设计出来本身就是一种妥协，这个方法代价高昂，而且十分不确定顺序（由于F-queue是新开的一个线程，所以可能导致并发执行的顺序问题），不如使用try-catch-finally，作者建议大家不要使用它。</p>
</li>
</ul>
</li>
<li>
<p>5.方法区的GC回收：</p>
<ul>
<li>主要是回收废弃常量和无用的类，例如常量池中存在的数据，没有任何对象等于这个数据，下次GC的时候这个常量会被回收。这样就是判断废弃常量的条件。</li>
<li>那么废弃的类如何判断呢，有三个条件：
<ul>
<li>1.该类所有实例已被回收</li>
<li>2.该类所有的ClassLoader都被回收</li>
<li>3.无法通过反射访问该类的方法。<br>
虚拟机可以对满足这些条件的类进行回收，仅仅是可以，而不是一定会。</li>
<li>🍉大量使用反射，动态代理，jsp等方式要进行类回收，不然永久代可能会溢出。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.垃圾收集算法：</p>
<ul>
<li>
<p>1.标记-清除算法：</p>
<ul>
<li>最基础的收集算法，先标记，再直接清除。标记部分上面有说过。</li>
<li>这个算法的不足就是清除后可能剩下很多小空间，没有足够的空间导致分配不了大对象，只能再触发一次GC。<br>
￼<img src="https://wkf1115.github.io/post-images/1587720959740.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>2.复制算法：</p>
<ul>
<li>为了解决上面方法的性能问题，大多数商业虚拟机都使用复制方法。</li>
<li>这种算法是先将内存划分为两块，每次使用的时候使用其中的一块，当这块内存满了之后，触发GC清理之后将剩余可用对象复制到另外一块上，清理出之前这块内存区域。<br>
这样可以使空间比较连续，分配起来很方便。<br>
￼<img src="https://wkf1115.github.io/post-images/1587720987444.png" alt="" loading="lazy"></li>
<li>🍉研究表明，98%的对象生命周期极短，需要被销毁，所以内存空间不需要按照上面的1:1分配。实际上分配方式是8:1，有一个较大的Eden空间和两个小的Survivor空间，每次使用一个Survivor空间和Eden空间。发生复制的时候将所有存活对象存在另外一块Survivor空间。</li>
<li>🍉如果发生Survivor空间不足的情况，这个Survivor空间会向JVM申请内存担保，也就是借一些内存来使用。多余出来的对象会直接进入老年代。</li>
</ul>
</li>
<li>
<p>3.标记-整理算法：</p>
<ul>
<li>由于第二种方法在对象存活率较高的时候需要很多复制操作，而且需要很多担保空间。所以需要这种算法</li>
<li>这种方法可以说是第一种方法的优化，区别在于标记后将存活的整理到一侧，销毁的进行删除。<br>
￼<img src="https://wkf1115.github.io/post-images/1587721017366.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>4.分代收集：</p>
<ul>
<li>
<p>这种方法可以说和上面的搭配使用，它根据对象的存活周期将Java堆划分为新生代和老年代。<br>
（新生代中对象死亡率高，老年代中对象存活率高）</p>
</li>
<li>
<p>🍉在新生代中使用复制算法，在老年代中使用标记-整理算法。</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>3.HotSpot算法实现：</p>
<ul>
<li>
<p>1.枚举根节点：</p>
<ul>
<li>这个算法是可达性分析，由于可达性分析找的根节点（GC Roots）分布在全局性的引用（常量和静态类属性）和执行上下文中，逐个检查开销很大。</li>
<li>所以在JVM中有一组叫做OopMap的数据结构来计算引用位置，在类加载完成后OopMap就能计算引用。GC在暂停所有线程进行扫描的时候直接扫描OopMap就可以判断哪些是该回收的对象。</li>
</ul>
</li>
<li>
<p>2.安全点：</p>
<ul>
<li>
<p>上一点的GC根据OopMap进行回收，但是OopMap在程序执行的时候需要动态生成，因为对象或引用会变化，那么如何选取生成方式呢？很显然，OopMap不能每一句都生成一次。</p>
</li>
<li>
<p>🍉安全点（Safepoint）就是生成OopMap的位置，线程只有在安全点才能进行暂停，等待GC的回收。</p>
</li>
<li>
<p>🍉安全点一般在方法调用，循环跳转，异常跳转这种功能指令生成。</p>
</li>
<li>
<p>🍎抢先式中断和主动式中断：</p>
<ul>
<li>1.由于线程必须执行到安全点才能进行终止，所以抢先式中断就是在GC发生时将所有线程中断，如果哪个线程没有到达安全点，让它启动，继续跑到安全点再停止。但是现在几乎没有虚拟机实现这种中断。</li>
<li>2.主动式中断就是各个线程在运行到安全点时，检查此时GC是否在工作，如果在GC要执行了就执行中断。GC在启动时会设置一个标志为真。其他线程读取这个标志就能实现交互。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>3.安全区域（Safe Region）：</p>
<ul>
<li>安全点只是保证了在程序执行的时候，很快会进入中断。但如果程序休眠或者中断的时候，安全点就无法保证它的继续中断了。因为线程休眠或中断时并没有为其分配CPU时间，也就无法响应GC。</li>
<li>🍉安全区域可以看作安全点的扩展，在线程进入安全区域代码的时候和安全点一样，此时GC可以执行。如果GC还没有结束，安全区域内的线程要执行结束，该线程会检查GC过程是否结束，如果结束，它会继续执行，否则等待离开信号。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>4.七大垃圾收集器：<br>
如果说收集算法是内存回收的方法，那么垃圾收集器就是内存回收的具体实现。<br>
￼<img src="https://wkf1115.github.io/post-images/1587721144014.png" alt="" loading="lazy"><br>
上面是新生代区域，下面是老年代区域。</p>
<ul>
<li>
<p>1.Serial收集器：最基本，发展最悠久的收集器</p>
<ul>
<li>这是一个单线程收集器，十分传统，新生代的时候使用复制算法，老年代使用标记-整理算法，在这个收集器运行的时候其他用户线程必须被停止。它的停止线程操作对于用户体验非常差，因为会有频繁的卡顿。</li>
<li>🍉但它也不是一无是处，毕竟简单又高效，停止其他线程，这使得它几乎没有用于线程交互的开销，可以专心进行收集。在新生代中可以使用。</li>
<li>到现在为止Client模式下默认的新生代收集器还是Serial<br>
￼<img src="https://wkf1115.github.io/post-images/1587721176137.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>2.ParNew收集器：多线程的Serial收集器</p>
<ul>
<li>该线程就是Serial收集器的多线程版本，没有什么创新，但它是Server模式下首选的新生代收集器，因为他可以和CMS收集器进行合作，一个新生代，一个老年代。</li>
<li>当然，在但CPU的情况下ParNew是不如Serial，因为有线程间的开销，但是一旦CPU数量增加，ParNew就大大的超过Serial。<br>
￼<img src="https://wkf1115.github.io/post-images/1587721202771.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>3.Parallel Scavenge收集器：</p>
<ul>
<li>这也是一个新生代收集器，也是采用复制算法，并发收集器。但它的重点和其他收集器都不同，其它收集器都致力于减小用户线程的停顿时间，而这个收集器致力于控制吞吐量。（吞吐量=运行用户代码时间/运行用户代码时间+垃圾收集时间）</li>
<li>🍉也就是说可以集中控制垃圾收集时间，适用于后台不需要太多的用户交互时使用。</li>
<li>🍉有三个参数可以修改，一个是控制最大垃圾收集停顿时间，一个是直接设置吞吐量大小，还有一个是开关，开启后GC可以自动根据性能监控动态指定参数，控制吞吐量。</li>
</ul>
</li>
<li>
<p>4.Serial Old收集器：</p>
<ul>
<li>Serial收集器的老年代版本，在老年代上采取标记整理算法。主要用于Client模式下的JVM</li>
</ul>
</li>
<li>
<p>5.Parallel Old收集器：</p>
<ul>
<li>Parallel Scavenge收集器的老年代版本，使用多线程和标记-整理算法。它和Parallel Scavenge收集器搭配可以用于“吞吐量优先的情况”。</li>
</ul>
</li>
<li>
<p>6.CMS收集器：</p>
<ul>
<li>
<p>这个收集器致力于获取最短回收停顿时间，并发收集，减小响应延迟，所以它主要用于服务端上，能够给用户带来较好的体验。</p>
</li>
<li>
<p>🍉基于标记—清除。分为四个步骤：<br>
1.初始标记<br>
2.并发标记<br>
3.重新标记<br>
4.并发清除</p>
<ul>
<li>
<p>首先，GC先对GC Roots关联的对象进行一次简单的标记，速度很快，这步骤是初始标记。</p>
</li>
<li>
<p>之后进入并发标记，这段时间内GC进行详细的查找应该被销毁的对象。</p>
</li>
<li>
<p>接下来是重新标记，这段时间GC会整理并发标记期间，用户同时运行产生的对象变动。</p>
</li>
<li>
<p>并发清除就是清除掉销毁对象。</p>
</li>
<li>
<p>🍎初始标记和重新标记是不并发的，这两个过程中其他线程会被暂停，但是CMS将占用时间最多的操作都放在了并发标记和并发清除中，这两个时间内所有线程同时运行，可以大大减少用户的停顿时间。</p>
</li>
<li>
<p>🍉它也有3个明显的缺点：</p>
<ul>
<li>
<p>1.并发阶段虽然不会停顿其他线程，但是由于对CPU资源的占用，应用程序会变慢，总吞吐量降低。<br>
（如果用户此时cpu资源不太足，GC和用户线程并发的执行会严重缩减用户剩余的CPU资源，导致严重卡顿）。</p>
</li>
<li>
<p>2.无法处理浮动垃圾，在并发阶段时用户还会产生新的垃圾，这部分垃圾没有被标记，只能等待下次GC回收。然而这一部分垃圾也需要占用空间，这就导致了GC不能等老年代内存满了之后再收集，需要预留一些额外空间。如果浮动垃圾溢出，JVM会采用Serial Old来临时处理老年代空间，这就导致大量的开销。</p>
</li>
<li>
<p>3.CMS收集的算法采用的是标记—整理算法，上面也讲过，这会导致大量内存碎片空间，不能存储大型的对象。为了解决这个问题，CMS采用在顶不住碎片空间带来的压力时使用内存碎片整理，但是整理过程其它用户线程必须被暂停，整理过程无法并发。</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>7.G1收集器：</p>
<ul>
<li>
<p>首先，G1收集器有如下特点：</p>
<ul>
<li>1.回收期间可以使用多CPU通过并发让其他线程依旧运行。</li>
<li>2.分代收集中的新生代和老年代不再物理隔离，而是概念上的隔离。</li>
<li>🍉（比CMS好的地方）3.基于标记—整理算法，相比较于标记—清理算法有着更多优势。</li>
<li>🍉（比CMS好的地方）4.可建立预测停顿时间模型，可以指定回收操作不超过多少毫秒，可以进行规划。<br>
🍉上面也提到了，G1不再物理隔离新生代和老年代，它将堆划分成了一个个Region，每次根据Region内垃圾价值的大小来选择回收哪个Region。在后台维护一个优先列表储存回收顺序。</li>
</ul>
<p>🍎思考问题：化整为零的思想看起来很简单，但是G1是如何保证扫描GC Roots可以分开扫描的？如果整体扫描那么开销变化并不大。（其实上面的划分新生代老年代的收集器也会有这个问题，回收新生代也要扫描老年代，增加开销）。<br>
🍎解决方案：G1每一个Region有一个Remembered Set，在JVM发现程序对引用类型属性进行写操作时，会在写操作前加上一个写屏障，判断引用类型是否处于不同的Region中（这是G1的分Region情况，在新生代和老年代情况就是检查新老年代对象是否引用了新生代对象），如果是，就把对象信息引用记录添加到其它Region的Remembere Set中。这样在不全堆扫描就内存回收的时候就不会遗漏某些对象了。</p>
<p>🍉详细过程：初始标记—&gt;并发标记—&gt;最终标记—&gt;筛选回收</p>
<ul>
<li>G1的初始标记和并发标记过程和CMS相似。</li>
<li>最终标记是使用Remembered Set Logs将并发过程中程序变动的对象记录保存在Remembered Set中，这段时间也是要停止用户线程。</li>
<li>筛选回收过程就是对Remembered Set进行排序。选出回收效率最高的Region。这个过程是可以和用户线程并发的，但效果并不理想。因为只回收一部分Region，回收时间用户可控，所以不如暂停用户线程来提高收集效率。<br>
￼<img src="https://wkf1115.github.io/post-images/1587721238844.png" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>5.如何去读GC日志：<br>
<img src="https://wkf1115.github.io/post-images/1587721270465.png" alt="" loading="lazy"></p>
<ul>
<li>一些术语：
<ul>
<li>1.GC和Full GC：前面加上Full代表此次GC的停顿类型，是否发生了停止其他线程的（stop-the-world）操作。如果调用System.gc(),那么会显示Full GC(System)。Full GC也代表着老年代GC。</li>
<li>2.DefNew，Tenured，Perm表示GC发生的区域，DefNew代表Default New Generation。可以看出这些区域是由使用的不同收集器和不同代决定的。</li>
<li>3.3324k—&gt;152K(3712K)，GC前该内存区域已使用空间—&gt;GC后该内存已使用空间(该内存区域总空间)，后面的3324K—&gt;152K(11904K)代表，GC前Java堆已使用空间—&gt;GC后Java堆已使用空间(java堆总空间)</li>
<li>4.后面的时间代表GC消耗时间。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>6.内存分配策略：</p>
<ul>
<li>
<p>对象内存分配主要是在新生代的Eden区上分配，如果启动了TLAB，会在TLAB上按照线程优先分配，少数情况下会分配在老年代中。</p>
</li>
<li>
<p>🍉大多数情况下，对象在新生代Eden区中分配，Eden没空间的时候，虚拟机会发起新生代GC（Minor GC）。如果Minor GC还不够空间，会触发分配担保机制，扩大老年代空间并将对象都装入老年区中。</p>
</li>
<li>
<p>🍉大对象直接进入老年代，需要大量连续内存空间来储存的对象会直接进入老年代。</p>
</li>
<li>
<p>🍉长期存活的对象将进入老年代：虚拟机为每个对象都定义了年龄，如果对象能存活到Survivor区域中，并在里面存活一段时间（默认为15岁），那么它就会进入老年代中。</p>
<ul>
<li>注1: 分代年龄最大为15岁，因为分代年龄在对象中占4个bit。代表1111是15。</li>
<li>注2：对象年龄的判断是动态的，如果Survivor空间中同年龄的对象占到了Survivor总空间一半以上，那么这个年龄会被设置成阈值，高于此年龄的对象会被保送到老年代。</li>
</ul>
</li>
<li>
<p>🍉空间分配担保也不是每次都能够成功的，在Survivor空间满了之后，GC会参考历代老年代对象平均对象容量大小，通过这个来判断是否进行Full GC来清理老年代。如果判断失误，强行担保，那么GC在失败后会立刻进行Full GC。</p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深入了解Java虚拟机第一章笔记📒]]></title>
        <id>https://wkf1115.github.io/post/shen-ru-liao-jie-java-xu-ni-ji-di-yi-zhang-bi-ji/</id>
        <link href="https://wkf1115.github.io/post/shen-ru-liao-jie-java-xu-ni-ji-di-yi-zhang-bi-ji/">
        </link>
        <updated>2020-04-21T11:58:33.000Z</updated>
        <content type="html"><![CDATA[<p>第一章：Java内存区域与内存溢出异常</p>
<p>1.运行时数据区域：</p>
<p>java虚拟机在执行过程中会将内存分为若干数据区域，每个区域都有用途，创建销毁时间，有些是JVM管理，有些是用户管理。</p>
<ul>
<li>
<p>1.程序计数器：</p>
<ul>
<li>
<p>🍉是一块较小的内存空间，作用就是指使JVM下一条指令应该是哪条（仅仅是概念模型中，实际JVM可能通过更高效的方式来实现）</p>
</li>
<li>
<p>🍎由于JVM的多线程通过线程频繁切换进行程序执行，同一时间一个处理器只会执行一条线程，为了切换后可以正确接着执行，所以每个线程都有一个独立的程序计数器（线程私有的内存）</p>
</li>
<li>
<p>🍉如果线程执行一个Java方法，计数器记录正在执行的字节码指令地址，如果是native方法，计数器为空（虽然为空，也没有OutOfMemoryError）</p>
</li>
</ul>
</li>
<li>
<p>2.虚拟机栈：</p>
<ul>
<li>
<p>🍎它也是线程私有的，和线程生命周期相同（描述Java方法执行的内存模型）。</p>
</li>
<li>
<p>🍉每个方法执行时都会创建一个栈帧来代表这个方法，栈帧的入和出虚拟机栈代表了方法的调用开始和执行结束。<br>
（栈帧用于储存局部变量表，操作数栈，动态链接，方法出口）</p>
<p>🍌大家对JVM简单划分的堆和栈，这个栈实际上可能大部分时候指的是虚拟机栈中的🍌局部变量表🍌。</p>
</li>
<li>
<p>🍑局部变量表：</p>
<ul>
<li>1.局部变量表存放了存在于编译期的所有基本数据类型，对象引用（指针类型），returnAddress类型（指向字节码指令的地址）。</li>
<li>2.64位长度的变量占用两个变量空间。其余占用一个。</li>
<li>3.局部变量表的内存空间在编译时就分配完成，在程序使用时局部变量的空间大小是完全确定的，方法运行不会改变它的大小。</li>
<li>4.会出现两种异常：StackOverflowError，线程请求的栈深度大于虚拟机允许的深度。<br>
OutOfMemoryError，虚拟机栈动态扩展时申请不到足够内存。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>3.本地方法栈：</p>
<ul>
<li>它的作用和虚拟机栈作用十分相似，虚拟机栈执行java代码，本地方法栈执行native方法。基本与虚拟机栈相同，虚拟机栈可以自由实现本地方法栈。有些虚拟机将本地方法栈和虚拟机栈合在一起用。</li>
</ul>
</li>
<li>
<p>4.Java堆：这是虚拟机内存中最大的一块。</p>
<ul>
<li>
<p>1.它被所有线程共享，在虚拟机启动时自动创建。</p>
</li>
<li>
<p>2.作用几乎就是存放对象。（但是随着JIT编译器的发展与逃逸技术分析，栈上分配，标量替换导致了可能不是所有的对象都在堆上。）</p>
</li>
<li>
<p>3.它是垃圾收集器的主要管理区域，也被叫做GC堆（我觉得叫垃圾堆也不错）</p>
</li>
<li>
<p>4.可以细分为很多区域，不过不管如何划分，堆中储存的对象都不会变化。后续的章节会详细介绍。</p>
</li>
<li>
<p>5.根据规范规定，堆可以在物理内存上不连续，只要在逻辑上连续就可以。</p>
</li>
<li>
<p>6.和虚拟机栈一样，如果扩展时内存不足，会报OutOfMemoryError异常。</p>
</li>
</ul>
</li>
<li>
<p>5.方法区：</p>
<ul>
<li>
<p>1.作用就是储存类信息，常量，静态变量这种编译期就被加载的值。</p>
</li>
<li>
<p>2.它和堆一样，被所有线程共享。</p>
<pre><code>  	🍉java虚拟机规范将其描述为堆的一个逻辑部分。但是它应该与堆区分开来
</code></pre>
</li>
<li>
<p>3.这部分的区域不是很容易被GC回收，虽然GC也掌管这片区域。</p>
<ul>
<li>
<p>🍑.运行时常量池：方法区的一部分</p>
<ul>
<li>存放编译期生成的各种字面量和符号引用。它相比较于Class文件常量池的另外一个特征就是具备动态性。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>5.直接内存：</p>
<ul>
<li>它并不是JVM内存中的一部分，有时候用于Native堆和Java堆的数据交互，将Native函数分配在直接内存中。<br>
（它的分配不会受到Java堆大小的限制）</li>
</ul>
</li>
</ul>
<p>2.Hostspot虚拟机探秘：</p>
<ul>
<li>
<p>1.对象的创建：</p>
<ul>
<li>
<p>1.虚拟机遇到new指令  ——&gt;  检查这个new的类(指令参数)能否在常量池中 ——&gt;  判断这个类是否已经加载解析和初始化过 ———&gt;  如果没有，必须先执行类加载    ——&gt;  通过后，为对象分配内存。到这里，详细讲解一下分配内存</p>
<ul>
<li>
<p>🍉首先，分配内存大小在类加载结束后可以确定，分配内存等同于从java堆中分出一块确定大小的内存。这样就有两种情况：</p>
<ul>
<li>
<p>（指针碰撞）1.如果内存是绝对规整的（连续的）那么会有一个指针用来放在内存中分界点上。分配内存就是把指针向空闲区域挪动一定大小的过程。</p>
</li>
<li>
<p>（空闲列表）2.如果内存不连续，那么JVM会维护一个列表，列表记录哪些内存区域可用，分配时列表挑选一块足够大的区域。</p>
</li>
</ul>
</li>
<li>
<p>🍉选择哪种分配方式由Java堆是否规整决定，也就是由垃圾收集器进行选择。</p>
</li>
<li>
<p>🍉创建对象的并发问题：</p>
<ul>
<li>由于开辟对象空间和修改指针有多步操作，所以一定会有并发问题。</li>
<li>解决方式就是每个线程在JAVA堆中预先分配一小块内存，这个内存叫做本地线程分配缓冲（TLAB）。哪个线程要分配内存，就在哪个线程的TLAB上进行分配。只有多个TLAB之间的切换，再用CAS加锁的方式进行处理。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.内存分配结束 ——&gt;  该空间会被初始化成0值（如果使用了TLAB，那么在TLAB分配阶段就会进行）</p>
<ul>
<li>🍉这个初始化行为是为了保证该对象的字段不用初始化处值就可以直接使用<br>
（这就是为什么类变量可以直接用，而方法内变量必须要手动指定初值）</li>
</ul>
</li>
<li>
<p>3.空间初始化结束 ——&gt; JVM写入对象头（比如对象是哪个类的实例，元数据信息，hashcode，GC分代年龄，偏向锁等）</p>
<ul>
<li>🍎到这里，从JVM的角度来讲，一个新对象产生了，但是从Java程序的角度看，并没有结束，因为init方法没有执行（构造方法）<br>
所以一般来说new指令执行结束后会执行init方法来初始化对象。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.对象的内存布局：分为三部分</p>
<ul>
<li>
<p>1.对象头（header）包含两个部分：储存对象自身的运行时数据（Mark Word）和类型指针。</p>
<ul>
<li>
<p>🍉储存对象自身的运行时数据（Mark Word）：哈希码，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳。这个数据长度分别为32bit和64bit，虽然长度固定，但是由于需要在尽可能小的地方储存信息，所以它的结构不确定，会被JVM进行调整。</p>
</li>
<li>
<p>🍉类型指针，指向它类元数据的指针，这个可以确定该对象是哪个类的实例。它固定4个字节或8个字节（取决于JVM有没有开启ClassPointer压缩）。<br>
（如果是一个Java数组，那么对象头中必须有一块用于记录数组长度的数据，因为数组元数据无法确定数组大小）</p>
</li>
</ul>
</li>
<li>
<p>2.实例数据：</p>
<ul>
<li>对象真正储存的有效信息，是各种类型的字段内容（储存顺序受JVM分配策略参数影响）<br>
🍉大体顺序是先写入父类属性，再写入子类属性，有些子类较窄的变量可能插入到父类变量之间</li>
</ul>
</li>
<li>
<p>3.对齐填充：</p>
<ul>
<li>占位作用，HotSpot VM要求对象大小必须是8字节的整数倍，所以需要对齐填充来占位。</li>
</ul>
</li>
</ul>
</li>
<li>
<pre><code>  eg：这里补充一个小例子：一个User对象（两个成员变量，一个int，一个String）它的对象内存布局为：8字节对象头+4字节类型指针+8字节实例数据（4字节int+4字节String）+4字节对齐=24字节。
</code></pre>
</li>
<li>
<p>3.对象的访问定位：</p>
<ul>
<li>
<p>对象创建后，运行程序时需要通过使用栈上的引用类型数据来操作对象。</p>
</li>
<li>
<p>而引用类型只是一个指向对象的引用，并没有定义如何去访问对象，所以访问方式也是通过不同虚拟机的不同实现。</p>
</li>
<li>
<p>主流访问方式有句柄和直接指针两种。</p>
<ul>
<li>
<p>1.句柄访问：<br>
Java堆中划分一片区域作为句柄池，引用类型指向句柄池中的句柄，每一个句柄都包含一个对象实例和对象类型（放在方法区，代表这个对象由哪个类实例化）。<br>
<img src="https://wkf1115.github.io/post-images/1587470457325.png" alt="" loading="lazy"><br>
￼</p>
</li>
<li>
<p>2.指针访问：<br>
引用直接指向对象的地址，对象实例中保存指向对象类型的指针。<br>
<img src="https://wkf1115.github.io/post-images/1587470476290.png" alt="" loading="lazy"><br>
￼</p>
<p>🍉句柄访问虽然速度慢，但稳定，因为对象被移动时只有句柄中的实例数据指针会被修改，引用本身不需要修改。而直接指针访问速度更快。</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>4.实际情况栈的内存溢出（OutOfMemoryError）和StackOverflowError异常：</p>
<ul>
<li>
<p>规范中定义这两个异常，前者为线程请求的栈深度大于JVM所允许的最大深度，后者为虚拟机扩展栈时无法申请到足够的内存空间。</p>
</li>
<li>
<p>在描述上，这两个异常看起来差不多，都是内存不够。<br>
实际上，在单线程的情况下，基本只能发生后者异常。无论是栈帧太大，还是内存不足。<br>
（JVM默认单线程的栈是可以无限扩展的，不会内存溢出）<br>
在开很多线程的时候，可能发生前者异常，线程过多，栈帧过多，导致内存溢出。</p>
<ul>
<li>🍎多线程情况下内存溢出，可以在不影响程序占用栈帧的情况下，缩减栈容量和减少堆内存来解决。<br>
内存缩减反而不溢出了，因为缩减的是单个线程的空栈帧。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>5.方法区和运行时常量池溢出：<br>
动态生成大量Class时，大量JSP（初次运行会编译为Java类）或JSP动态生成JSP文件，方法区会溢出。<br>
常量池内常量设置过多时常量池会溢出。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java并发编程艺术第四章学习笔记📒]]></title>
        <id>https://wkf1115.github.io/post/java-bing-fa-bian-cheng-yi-zhu-di-si-zhang-xue-xi-bi-ji/</id>
        <link href="https://wkf1115.github.io/post/java-bing-fa-bian-cheng-yi-zhu-di-si-zhang-xue-xi-bi-ji/">
        </link>
        <updated>2020-04-21T09:06:58.000Z</updated>
        <content type="html"><![CDATA[<p>第四章：JAVA并发编程基础</p>
<pre><code>实际上JAVA天生是一个多线程语言，在运行mian方法的时候就会执行多个线程。多线程带来了许多好处，更多的处理器核心，更快的响应时间，更好的编程模型。
</code></pre>
<p>1.线程优先级：</p>
<ul>
<li>
<p>现代操作系统分配内存时会分出一个个时间片，每一个线程使用不等数量的时间片，线程时间片用完了就会发生线程调度。</p>
</li>
<li>
<p>线程优先级就是线程需要多少处理器的资源。</p>
</li>
<li>
<p>首先Java线程是通过一个名字叫做priority的整形成员变量来控制优先级，优先级的范围是1～10。</p>
</li>
<li>
<p>可以通过setPriority(int)方法设置优先级，默认优先级是5，优先级高的线程时间片要多于低的。</p>
</li>
<li>
<p>🍉频繁阻塞（休眠或者I/O操作）的线程需要设置较高的优先级，偏重计算（需要较多cpu时间或者偏运算）的线程需要较低的优先级。</p>
</li>
<li>
<p>🍉这样可以避免cpu资源被偏重计算的线程独占。</p>
</li>
<li>
<p>🍎线程优先性的设置，在很多实际jvm环境中都不会生效，所以这条仅供参考。</p>
</li>
</ul>
<p>2.线程的状态：</p>
<ul>
<li>
<p>线程在生命周期中有6种状态：</p>
<ul>
<li>
<p>1.NEW：初始状态，线程刚刚被构建，还没有调用start()方法。</p>
</li>
<li>
<p>2.RUNNABLE：运行状态，操作系统的就绪和运行两种状态都被称作运行状态。</p>
</li>
<li>
<p>3.BLOCKED：阻塞状态，表示被锁阻塞。</p>
</li>
<li>
<p>4.WAITING：等待状态，表示该线程需要其它线程作出一些特定动作。</p>
</li>
<li>
<p>5.TIME_WAITING：超时等待，不同于WAITING，他可以在指定时间内自行返回。</p>
</li>
<li>
<p>6.TERMINATED：终止状态，线程执行完毕。</p>
<ul>
<li>线程的运行流程：线程创建后会调用start()方法开始运行，线程执行wait()方法后，线程会进入等待状态。等待状态需要其他线程的通知才能变回运行状态，</li>
<li>超时等待时间到达将会返回到运行状态，线程在没有获取锁的时候会进入阻塞状态，线程在执行Runnable的run()方法后会进入终止状态。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>3.Daemon线程：</p>
<ul>
<li>🍉Daemon线程主要用于支持程序后台调度和支持性工作，当JVM中不存在非Daemon线程的时候，JVM会退出。</li>
</ul>
<p>4.线程的创建：</p>
<ul>
<li>
<p>一个新线程的构造是由其parent线程进行空间分配的，它继承了parent线程是否为Daemon，优先级，加载资源的contextClassLoader还有可继承的ThreadLocal，这个线程还会有唯一的ID。</p>
</li>
<li>
<p>创建结束之后调用start()方法就可以启动线程，只要线程规划器空闲，应该立即启动该线程。</p>
</li>
</ul>
<p>5.线程的终止：</p>
<ul>
<li>线程的中断操作可以作为一种简便的线程间交互方式，同时也可在线程内设置变量来控制线程的终止。</li>
</ul>
<p>6.synchronized的方式：</p>
<ul>
<li>任意线程对Object的访问需要经过它的Monitor（监视器），线程首先对监视器执行Monitor.Enter()方法，如果Enter失败，线程会进入一个同步队列。</li>
<li>线程在释放锁的时候，会执行Monitor.exit()方法，同步队列检测到exit方法被调用时，队头的线程会执行出队操作并执行Monitor.Enter()方法。</li>
</ul>
<p>7.wait()和notify()：</p>
<ul>
<li>
<p>1.wait()和notify(),notifyAll()在调用时需要给先获取到锁。</p>
</li>
<li>
<p>2.调用wait()方法后，线程状态变为waiting，并加入到同步队列中。</p>
</li>
<li>
<p>3.notify调用后，线程不会立即从wait返回，需要调用notify的线程释放锁后，wait线程获取到锁，才有可能返回。</p>
</li>
<li>
<p>🍉（notify方法将一个wait线程从等待队列中移到同步队列中，notifyAll将等待队列中全部的线程都移到同步队列，被移动的线程由waiting变为blocked状态）<br>
￼<br>
<img src="https://wkf1115.github.io/post-images/1587460118713.png" alt="" loading="lazy"></p>
</li>
</ul>
<p>8.等待/通知的经典范式：</p>
<ul>
<li>
<p>等待方：</p>
<ul>
<li>1.获取对象的锁</li>
<li>2.如果条件不满足，调用对象的wait()方法，如果条件满足停止wait()</li>
</ul>
</li>
<li>
<p>通知方：</p>
<ul>
<li>1.获得对象的锁</li>
<li>2.改变条件</li>
<li>3.通知所有等待的线程</li>
</ul>
</li>
</ul>
<p>9.thread.join()的使用：</p>
<ul>
<li>如果一个线程A执行了B.join()语句，那么A等待B线程结束之后才会从B.join()返回（继续执行）。</li>
<li>从源码角度来看，join()的实现使用了等待/通知的经典范式—加锁，循环，和处理逻辑，只不过条件变为了线程是否活着。</li>
</ul>
<p>10.ThreadLocal的使用：</p>
<ul>
<li>
<p>ThreadLocal是线程变量，是以ThreadLocal对象为键，任意对象为值的储存结构。这个结构是附带在线程上的。也就是一个线程可以根据一个ThreadLocal对象查询				该线程的某些信息。</p>
</li>
<li>
<p>springAOP中可以用到此类方法。因为这个变量可以将方法拆分开，中间插入其他方法，通过变量来传递信息。</p>
</li>
</ul>
<p>11.线程应用实例：等待超时模式：</p>
<pre><code>		// 对当前对象加锁
		public synchronized Object get(long mills) throws InterruptedException { 
				long future = System.currentTimeMillis() + mills; 
				long remaining = mills;					// 当超时大于0并且result返回值不满足要求					while ((result == null) &amp;&amp; remaining &gt; 0) { 
					wait(remaining);
					remaining = future - System.currentTimeMillis(); 
				}
					return result; 
		}
</code></pre>
<ul>
<li>可以看出，等待超时模式在原来的等待/通知范式基础上增加了超时控制。这样即使方法执行时间过长，也不会永久阻塞调用者。而回按时返回。</li>
</ul>
<p>12.一个简单的数据库连接池示例：</p>
<ul>
<li>
<p>连接池通过构造函数初始化最大上限，通过双向队列来维护连接。</p>
</li>
<li>
<p>1.连接池ConnectionPool：</p>
<ul>
<li>
<p>1.构造方法，表示次连接池能够容纳多少连接。</p>
</li>
<li>
<p>2.归还连接方法，pool将传入的连接放回队列，并通知其他连接。</p>
</li>
<li>
<p>3.获取连接方法，判断传入时间参数，不停使线程wait(),判断传入时间过了多久（通过上面的等待超时模式），直到时间到了，返回连接池的第一个连接。如果超时直接返回null/连接。</p>
</li>
</ul>
</li>
<li>
<p>2.模拟连接ConnectionDriver：</p>
<ul>
<li>
<p>代表连接池中连接自身。再模拟一点点延时（线程休眠）。</p>
</li>
<li>
<p>🍉统计数据表示，在连接池中连接一定的情况下，随着客户端线程的增加，出现无法连接的比率会升高，这样超时控制的等待/通知范式可以保证线程不会一直挂在连接获取的操作上。</p>
</li>
</ul>
</li>
</ul>
<p>13.线程池技术：</p>
<ul>
<li>
<p>首先，我们为什么需要线程池？</p>
</li>
<li>
<p>线程频繁的被创建，被销毁都需要很大的开销，如果使用线程池统一调度，就会大大的节省资源。</p>
<pre><code>   public interface ThreadPool&lt;Job extends Runnable&gt; { // 执行一个Job，这个Job需要实现Runnable		
      void execute(Job job);	// 关闭线程池 
      void shutdown();  // 增加工作者线程	
      void addWorkers(int num); // 减少工作者线程				
      void removeWorker(int num); // 得到正在等待执行的任务数量
      int getJobSize(); 
    } 
</code></pre>
</li>
<li>
<p>从线程池的实现可以看到，当客户端调用execute(Job)方法时，会不断地向任务列表jobs中 添加Job，而每个工作者线程会不断地从jobs上取出一个Job进行执行，当jobs为空时，工作者线 程进入等待状态。</p>
</li>
<li>
<p>添加一个Job后，对工作队列jobs调用了其notify()方法，而不是notifyAll()方法，因为能够 确定有工作者线程被唤醒，这时使用notify()方法将会比notifyAll()方法获得更小的开销(避免 将等待队列中的线程全部移动到阻塞队列中)。</p>
</li>
<li>
<p>可以看到，线程池的本质就是使用了一个线程安全的工作队列连接工作者线程和客户端线程，客户端线程将任务放入工作队列后便返回，而工作者线程则不断地从工作队列上取出 工作并执行。当工作队列为空时，所有的工作者线程均等待在工作队列上，当有客户端提交了 一个任务之后会通知任意一个工作者线程，随着大量的任务被提交，更多的工作者线程会被 唤醒。</p>
</li>
</ul>
<p>14.基于线程池技术的web服务器：</p>
<ul>
<li>大部分Web服务器都是支持并发访问的，Tomcat和Jetty在处理请求的过程中都使用了线程池技术。<br>
￼<img src="https://wkf1115.github.io/post-images/1588937718406.png" alt="" loading="lazy"></li>
<li>SimpleHttpServer在建立了与客户端的连接之后，并不会处理客户端的请求， 而是将其包装成HttpRequestHandler并交由线程池处理。在线程池中的Worker处理客户端请求 的同时，SimpleHttpServer能够继续完成后续客户端连接的建立，不会阻塞后续客户端的请求。</li>
</ul>
]]></content>
    </entry>
</feed>